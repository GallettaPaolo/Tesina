#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tesina:server');
var http = require('http');
var mongoInstance = require('../models/MongoHelper')();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Configuro Socket.io
 */

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* Gestione della connessione con il server tramite socket io
*/

var sockets = [];

io.on('connection', (socket) => {
  socket.emit("sendUserId");
  socket.on("athleteId", (data) => {
    sockets.push({ id: data.userId, conn: socket });
  })

  socket.on("disconnect", () => {
    for (var i = 0; i < sockets.length; i++) {
      if (sockets[i].conn === socket)
        sockets.splice(i, 1);
    }
  })

  mongoInstance.setCallback((e, d) => {  //Funzione di callback che viene richiamata ogni volta che Ã¨ necessaria una modifica in realtime con l'utente
    if (d != undefined) {
      if (d.filter != undefined || d.filter != null) {
        var athletesId = d.filter;
        sockets.forEach((elem) => {
          if (athletesId== elem.id) {
            console.log("Invio al socket con id: " + elem.id + ", l'evento: " + e)
            elem.conn.emit(e, d.data);
          }
        })
      }
    } else {
      socket.emit(e)
    }
  });
})



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
